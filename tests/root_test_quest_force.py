#!/usr/bin/env python3
"""
üéØ TESTE FOR√áADO DO SISTEMA DE QUEST AUTOMATION
===============================================

Script standalone para testar imediatamente o sistema de quest automation
sem precisar esperar o ciclo normal do bot ou modificar arquivos.

Uso:
    python test_quest_force.py

Funcionalidades:
- ‚úÖ Inicializa√ß√£o r√°pida do sistema
- ‚úÖ Teste de navega√ß√£o para quests
- ‚úÖ Detec√ß√£o de quest points
- ‚úÖ Listagem de quests dispon√≠veis
- ‚úÖ Teste de intera√ß√£o (opcional)
- ‚úÖ Confirma√ß√£o manual do usu√°rio
- ‚úÖ Relat√≥rio detalhado
"""

import asyncio
import sys
import os
from pathlib import Path

# Adicionar src ao path
sys.path.append(str(Path(__file__).parent / "src"))

from automation.web_engine import get_web_engine, WebAutomationEngine
from automation.quest_automation import QuestAutomation
from config.types import BotConfig
from typing import List, Dict, Any


class QuestTester:
    """Testador standalone para quest automation"""

    def __init__(self):
        self.web_engine: WebAutomationEngine | None = None
        self.quest_automation: QuestAutomation | None = None
        self.config = BotConfig()

    async def initialize(self):
        """Inicializa os sistemas necess√°rios"""
        print("üöÄ Inicializando sistemas de teste...")

        try:
            # Obter web engine singleton
            self.web_engine = await get_web_engine()
            print("‚úÖ Web Engine obtido")

            # Inicializar quest automation
            self.quest_automation = QuestAutomation()
            print("‚úÖ Quest Automation inicializado")

            return True

        except Exception as e:
            print(f"‚ùå Erro na inicializa√ß√£o: {e}")
            return False

    async def test_navigation(self):
        """Testa navega√ß√£o para p√°gina de quests"""
        print("\nüìç Testando navega√ß√£o para quests...")

        try:
            success = await self.quest_automation.navigate_to_quests()
            if success:
                print("‚úÖ Navega√ß√£o para quests bem-sucedida")
                return True
            else:
                print("‚ùå Falha na navega√ß√£o para quests")
                return False

        except Exception as e:
            print(f"‚ùå Erro na navega√ß√£o: {e}")
            return False

    async def test_quest_points(self):
        """Testa detec√ß√£o de quest points"""
        print("\nüéØ Testando detec√ß√£o de quest points...")

        try:
            current, maximum = await self.quest_automation.get_quest_points()

            if current is not None and maximum is not None:
                print(f"‚úÖ Quest Points detectados: {current}/{maximum}")
                return current, maximum
            else:
                print("‚ùå N√£o foi poss√≠vel detectar quest points")
                return None, None

        except Exception as e:
            print(f"‚ùå Erro na detec√ß√£o de quest points: {e}")
            return None, None

    async def test_quest_list(self):
        """Testa listagem de quests dispon√≠veis"""
        print("\nüìù Testando listagem de quests...")

        try:
            quests = await self.quest_automation.get_available_quests()

            if quests:
                print(f"‚úÖ {len(quests)} quests encontrados")

                # Mostrar alguns exemplos
                print("\nüìã Primeiros 5 quests encontrados:")
                for i, quest in enumerate(quests[:5]):
                    level = quest.get('level', 'N/A')
                    name = quest.get('name', 'N/A')[:30]
                    print(f"  {i+1}. Level {level}: {name}")

                return quests
            else:
                print("‚ùå Nenhum quest encontrado")
                return []

        except Exception as e:
            print(f"‚ùå Erro na listagem de quests: {e}")
            return []

    async def test_interaction(self, quests):
        """Testa intera√ß√£o com um quest (opcional)"""
        if not quests:
            return False

        print("\nüéÆ Teste de intera√ß√£o dispon√≠vel...")
        response = input("Deseja testar clique em um quest? (s/n): ").lower().strip()

        if response == 's':
            try:
                # Pegar o primeiro quest
                first_quest = quests[0]
                print(f"üéØ Testando clique no quest: {first_quest.get('name', 'N/A')}")

                success = await self.quest_automation.click_quest(first_quest)

                if success:
                    print("‚úÖ Clique no quest bem-sucedido")

                    # Aguardar um pouco para popup aparecer
                    await asyncio.sleep(2)

                    # Tentar encontrar bot√£o perform
                    perform_button = await self.quest_automation.find_perform_button()

                    if perform_button:
                        print("‚úÖ Bot√£o 'Perform' encontrado")

                        response = input("Deseja executar o quest? (s/n): ").lower().strip()
                        if response == 's':
                            result = await self.quest_automation.perform_quest()
                            if result:
                                print("‚úÖ Quest executado com sucesso!")
                            else:
                                print("‚ùå Falha na execu√ß√£o do quest")
                    else:
                        print("‚ö†Ô∏è Bot√£o 'Perform' n√£o encontrado")

                    # Fechar popups
                    await self.quest_automation.close_popups()
                    print("üßπ Popups fechados")

                    return True
                else:
                    print("‚ùå Falha no clique do quest")
                    return False

            except Exception as e:
                print(f"‚ùå Erro na intera√ß√£o: {e}")
                return False

        return True

    async def test_full_cycle(self):
        """Testa um ciclo completo (opcional)"""
        print("\nüîÑ Teste de ciclo completo dispon√≠vel...")
        response = input("Deseja testar um ciclo completo de quest automation? (s/n): ").lower().strip()

        if response == 's':
            try:
                print("üöÄ Executando ciclo completo...")

                result = await self.quest_automation.execute_quests_cycle(max_quests=1)

                if result and result.get('quests_completed', 0) > 0:
                    print("‚úÖ Ciclo completo executado com sucesso!")
                    print(f"üìä Resultado: {result}")
                    return True
                else:
                    print("‚ö†Ô∏è Ciclo completo executado, mas sem quests completados")
                    return False

            except Exception as e:
                print(f"‚ùå Erro no ciclo completo: {e}")
                return False

        return True

    async def cleanup(self):
        """Limpa recursos"""
        print("\nüßπ Limpando recursos...")

        try:
            if self.web_engine:
                await self.web_engine.cleanup()
                print("‚úÖ Web Engine limpo")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na limpeza: {e}")

    async def run_tests(self):
        """Executa todos os testes"""
        print("=" * 60)
        print("üéØ TESTE FOR√áADO DO SISTEMA DE QUEST AUTOMATION")
        print("=" * 60)

        # Inicializa√ß√£o
        if not await self.initialize():
            return False

        try:
            # Teste 1: Navega√ß√£o
            nav_success = await self.test_navigation()

            if nav_success:
                # Teste 2: Quest Points
                current, maximum = await self.test_quest_points()

                # Teste 3: Listagem de Quests
                quests = await self.test_quest_list()

                # Teste 4: Intera√ß√£o (opcional)
                await self.test_interaction(quests)

                # Teste 5: Ciclo completo (opcional)
                await self.test_full_cycle()

                # Relat√≥rio final
                print("\n" + "=" * 60)
                print("üìä RELAT√ìRIO FINAL DO TESTE")
                print("=" * 60)
                print(f"‚úÖ Navega√ß√£o: {'OK' if nav_success else 'FALHOU'}")
                print(f"‚úÖ Quest Points: {current}/{maximum}" if current is not None else "‚ùå Quest Points: FALHOU")
                print(f"‚úÖ Quests Encontrados: {len(quests)}" if quests else "‚ùå Quests: NENHUM")

                # Confirma√ß√£o do usu√°rio
                print("\nüéØ CONFIRMA√á√ÉO MANUAL:")
                print("Por favor, confirme se o sistema funcionou corretamente:")
                print("1. O bot navegou para a p√°gina de quests?")
                print("2. Os quest points foram detectados corretamente?")
                print("3. A lista de quests foi carregada?")
                print("4. (Se testado) A intera√ß√£o com quests funcionou?")

                user_confirm = input("\nO teste foi bem-sucedido? (s/n): ").lower().strip()

                if user_confirm == 's':
                    print("üéâ TESTE CONFIRMADO COMO SUCESSO!")
                    print("‚úÖ Sistema de Quest Automation est√° funcionando!")
                else:
                    print("‚ö†Ô∏è Teste relatado como falha pelo usu√°rio")
                    print("üîß Verifique os logs acima para identificar problemas")

                return user_confirm == 's'

            else:
                print("\n‚ùå TESTE FALHOU NA NAVEGA√á√ÉO")
                return False

        finally:
            await self.cleanup()


async def main():
    """Fun√ß√£o principal"""
    tester = QuestTester()

    try:
        success = await tester.run_tests()

        if success:
            print("\nüéâ SISTEMA DE QUEST AUTOMATION: FUNCIONANDO!")
            return 0
        else:
            print("\n‚ùå SISTEMA DE QUEST AUTOMATION: PROBLEMAS DETECTADOS")
            return 1

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Teste interrompido pelo usu√°rio")
        return 1
    except Exception as e:
        print(f"\n‚ùå Erro fatal no teste: {e}")
        return 1


if __name__ == "__main__":
    print("üéØ Iniciando teste for√ßado do Quest Automation...")
    print("üìã Este script ir√° testar rapidamente se o sistema est√° funcionando")
    print("‚è±Ô∏è Tempo estimado: 1-3 minutos")
    print()

    # Verificar se estamos no diret√≥rio correto
    if not os.path.exists("src/automation/quest_automation.py"):
        print("‚ùå Erro: Execute este script do diret√≥rio raiz do projeto (c:\\BOTNOVOTESTATT)")
        sys.exit(1)

    # Executar testes
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
